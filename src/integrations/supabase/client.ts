
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://ifcroxzbgdqlzoymyyfw.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImlmY3JveHpiZ2RxbHpveW15eWZ3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM2NTg1NDYsImV4cCI6MjA1OTIzNDU0Nn0.AjioEMDkfQyIbfulP7BG_V7l2qia7pY7-yRdUeL6UWI";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    autoRefreshToken: true,
    persistSession: true
  }
});

// Helper functions for soft deletion and tracking
export const softDelete = async (table: string, id: string, userId: string) => {
  return await supabase
    .from(table as any)
    .update({ 
      deleted_at: new Date().toISOString(),
      deleted_by: userId
    })
    .eq('id', id);
};

export const restoreDeleted = async (table: string, id: string) => {
  return await supabase
    .from(table as any)
    .update({ 
      deleted_at: null,
      deleted_by: null
    })
    .eq('id', id);
};

export const getSalesWithUserInfo = async (includeDeleted = false) => {
  let query = supabase
    .from('transactions')
    .select(`
      *,
      created_by_user:profiles!created_by(email),
      updated_by_user:profiles!updated_by(email),
      deleted_by_user:profiles!deleted_by(email)
    `);

  if (!includeDeleted) {
    query = query.is('deleted_at', null);
  }
    
  return await query.order('created_at', { ascending: false });
};

// New helper function to classify users based on email domains
export const classifyUserRole = (email: string): 'admin' | 'user' => {
  // Convert email to lowercase for case-insensitive comparison
  const lowerEmail = email.toLowerCase();
  
  // Define patterns for admin classification
  const adminPatterns = [
    /@admin\./,         // Matches emails like user@admin.domain.com
    /admin@/,           // Matches emails that start with admin@
    /@company\.com$/    // Example: matches emails ending with @company.com
  ];
  
  // Check if email matches any admin patterns
  for (const pattern of adminPatterns) {
    if (pattern.test(lowerEmail)) {
      return 'admin';
    }
  }
  
  // Default to regular user
  return 'user';
};

// Enhanced helper function to get all users with their classified roles using profiles table
export const getAllUsersWithClassification = async () => {
  try {
    // Always fetch from the profiles table now
    const { data: profiles, error } = await supabase
      .from('profiles')
      .select('id, email, created_at');
    
    if (error) {
      throw error;
    }
    
    if (!profiles || profiles.length === 0) {
      return { data: [], error: null };
    }
    
    const users = profiles.map(profile => {
      return {
        id: profile.id,
        email: profile.email,
        role: classifyUserRole(profile.email),
        created_at: profile.created_at
      };
    });
    
    return { data: users, error: null };
  } catch (error) {
    console.error('Error getting users from profiles:', error);
    return { data: [], error };
  }
};

// Helper function to ensure a profile exists for a user
export const ensureUserProfile = async (userId: string, email: string) => {
  try {
    // Check if profile exists
    const { data: existingProfile, error: checkError } = await supabase
      .from('profiles')
      .select('id')
      .eq('id', userId)
      .single();
    
    if (checkError && checkError.code !== 'PGRST116') { // PGRST116 = 'No rows found'
      throw checkError;
    }
    
    // If profile doesn't exist, create it
    if (!existingProfile) {
      const { error: insertError } = await supabase
        .from('profiles')
        .insert({ id: userId, email });
      
      if (insertError) throw insertError;
      
      console.log(`Created profile for user ${userId} with email ${email}`);
    }
    
    return true;
  } catch (error) {
    console.error('Error ensuring user profile:', error);
    return false;
  }
};
