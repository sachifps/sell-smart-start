
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://ifcroxzbgdqlzoymyyfw.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImlmY3JveHpiZ2RxbHpveW15eWZ3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM2NTg1NDYsImV4cCI6MjA1OTIzNDU0Nn0.AjioEMDkfQyIbfulP7BG_V7l2qia7pY7-yRdUeL6UWI";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    autoRefreshToken: true,
    persistSession: true
  }
});

// Helper functions for soft deletion and tracking
export const softDelete = async (table: string, id: string, userId: string) => {
  return await supabase
    .from(table as any)
    .update({ 
      deleted_at: new Date().toISOString(),
      deleted_by: userId
    })
    .eq('id', id);
};

export const restoreDeleted = async (table: string, id: string) => {
  return await supabase
    .from(table as any)
    .update({ 
      deleted_at: null,
      deleted_by: null
    })
    .eq('id', id);
};

export const getSalesWithUserInfo = async (includeDeleted = false) => {
  let query = supabase
    .from('transactions')
    .select(`
      *,
      created_by_user:profiles!created_by(email),
      updated_by_user:profiles!updated_by(email),
      deleted_by_user:profiles!deleted_by(email)
    `);

  if (!includeDeleted) {
    query = query.is('deleted_at', null);
  }
    
  return await query.order('created_at', { ascending: false });
};

// Interface for preregistered email data
interface PreregisteredEmailData {
  role: 'admin' | 'user';
  can_edit_sales: boolean;
  can_delete_sales: boolean;
  can_add_sales: boolean;
  can_edit_sales_detail: boolean;
  can_delete_sales_detail: boolean;
  can_add_sales_detail: boolean;
}

// Function to pre-register an email with role and permissions
export const preregisterEmail = async (email: string, role: 'admin' | 'user', permissions: {
  can_edit_sales: boolean;
  can_delete_sales: boolean;
  can_add_sales: boolean;
  can_edit_sales_detail: boolean;
  can_delete_sales_detail: boolean;
  can_add_sales_detail: boolean;
}) => {
  // Check if email is already pre-registered
  const { data: existingEmail, error: checkError } = await supabase
    .from('preregistered_emails' as any)
    .select('email')
    .eq('email', email)
    .single();
    
  if (checkError && checkError.code !== 'PGRST116') { // PGRST116 is "no rows found" which is expected
    throw checkError;
  }
  
  if (existingEmail) {
    // Update existing pre-registration
    const { error: updateError } = await supabase
      .from('preregistered_emails' as any)
      .update({ 
        role, 
        ...permissions,
        updated_at: new Date().toISOString() 
      })
      .eq('email', email);
      
    if (updateError) throw updateError;
    return { message: 'Email pre-registration updated' };
  } else {
    // Create new pre-registration
    const { error: insertError } = await supabase
      .from('preregistered_emails' as any)
      .insert({ 
        email, 
        role, 
        ...permissions 
      });
      
    if (insertError) throw insertError;
    return { message: 'Email pre-registered successfully' };
  }
};
